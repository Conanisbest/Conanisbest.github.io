<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Conan的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://conanisbest.github.io/"/>
  <updated>2020-07-03T08:17:47.315Z</updated>
  <id>https://conanisbest.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决java导出文件时文件名中文不显示/乱码</title>
    <link href="https://conanisbest.github.io/2020/07/02/five/"/>
    <id>https://conanisbest.github.io/2020/07/02/five/</id>
    <published>2020-07-02T07:39:23.000Z</published>
    <updated>2020-07-03T08:17:47.315Z</updated>
    
    <content type="html"><![CDATA[<p><strong>解决java导出文件时文件名中文不显示/乱码</strong></p><p>直接把中文文件名改为iso-8859-1就可以了~</p><p>response.setHeader(“Content-Disposition”, “attachment;filename=”     + new String(fileName.getBytes(),”iso-8859-1”) + “.xls”);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;解决java导出文件时文件名中文不显示/乱码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接把中文文件名改为iso-8859-1就可以了~&lt;/p&gt;
&lt;p&gt;response.setHeader(“Content-Disposition”, “attachment;fil
      
    
    </summary>
    
    
    
      <category term="问题解决" scheme="https://Conanisbest.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>hibernate工作原理及作用</title>
    <link href="https://conanisbest.github.io/2020/07/02/four/"/>
    <id>https://conanisbest.github.io/2020/07/02/four/</id>
    <published>2020-07-02T07:30:06.000Z</published>
    <updated>2020-07-03T08:17:29.053Z</updated>
    
    <content type="html"><![CDATA[<p><strong>hibernate工作原理及作用</strong></p><p>2015年08月04日 15:00:17 <a href="https://me.csdn.net/u010197033" target="_blank" rel="noopener">进击的LTQ</a> 阅读数 54747</p><p><strong>转载自 <a href="http://www.cnblogs.com/dashi/p/3597969.html#commentform" target="_blank" rel="noopener">http://www.cnblogs.com/dashi/p/3597969.html#commentform</a></strong></p><p><a href="http://www.cnblogs.com/dashi/p/3597969.html" target="_blank" rel="noopener"><strong>JAVA Hibernate工作原理及为什么要用</strong></a></p><p><strong>hibernate 简介：</strong></p><p>hibernate是一个开源框架，它是对象关联关系映射的框架，它对JDBC做了轻量级的封装，而我们java程序员可以使用面向对象的思想来操纵数据库。</p><p>hibernate核心接口</p><p>session：负责被持久化对象CRUD操作</p><p>sessionFactory:负责初始化hibernate，创建session对象</p><p>configuration:负责配置并启动hibernate，创建SessionFactory</p><p>Transaction:负责事物相关的操作</p><p>Query和Criteria接口：负责执行各种数据库查询</p><p><strong>hibernate工作原理：</strong></p><p>1.通过Configuration config = new Configuration().configure();//读取并解析hibernate.cfg.xml配置文件</p><p>2.由hibernate.cfg.xml中的<mapping resource="com/xx/User.hbm.xml">读取并解析映射信息</mapping></p><p>3.通过SessionFactory sf = config.buildSessionFactory();//创建SessionFactory</p><p>4.Session session = sf.openSession();//打开Sesssion</p><p>5.Transaction tx = session.beginTransaction();//创建并启动事务Transation</p><p>6.persistent operate操作数据，持久化操作</p><p>7.tx.commit();//提交事务</p><p>8.关闭Session</p><p>9.关闭SesstionFactory</p><p><strong>为什么要用hibernate：</strong></p><p>\1. 对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。</p><p>\2. Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作</p><p>\3. hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。</p><p>\4. hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。</p><p> <strong>Hibernate是如何延迟加载?get与load的区别</strong></p><p>\1. 对于Hibernate get方法，Hibernate会确认一下该id对应的数据是否存在，首先在session缓存中查找，然后在二级缓存中查找，还没有就查询数据库，数据 库中没有就返回null。这个相对比较简单，也没有太大的争议。主要要说明的一点就是在这个版本(bibernate3.2以上)中get方法也会查找二级缓存！</p><p>\2. Hibernate load方法加载实体对象的时候，根据映射文件上类级别的lazy属性的配置(默认为true)，分情况讨论： </p><p>(1)若为true,则首先在Session缓存中查找，看看该id对应的对象是否存在，不存在则使用延迟加载，返回实体的代理类对象(该代理类为实体类的子类，由CGLIB动态生成)。等到具体使用该对象(除获取OID以外)的时候，再查询二级缓存和数据库，若仍没发现符合条件的记录，则会抛出一个ObjectNotFoundException。</p><p>(2)若为false,就跟Hibernateget方法查找顺序一样，只是最终若没发现符合条件的记录，则会抛出一个ObjectNotFoundException。</p><p>这里get和load有两个重要区别: </p><p>如果未能发现符合条件的记录，Hibernate get方法返回null，而load方法会抛出一个ObjectNotFoundException。</p><p>load方法可返回没有加载实体数据的代 理类实例，而get方法永远返回有实体数据的对象。</p><p>(对于load和get方法返回类型：好多书中都说：“get方法永远只返回实体类”，实际上并不正 确，get方法如果在session缓存中找到了该id对应的对象，如果刚好该对象前面是被代理过的，如被load方法使用过，或者被其他关联对象延迟加 载过，那么返回的还是原先的代理对象，而不是实体类对象，如果该代理对象还没有加载实体数据（就是id以外的其他属性数据），那么它会查询二级缓存或者数 据库来加载数据，但是返回的还是代理对象，只不过已经加载了实体数据。)</p><p>总之对于get和load的根本区别，一句话，hibernate对于 load方法认为该数据在数据库中一定存在，可以放心的使用代理来延迟加载，如果在使用过程中发现了问题，只能抛异常；而对于get方 法，hibernate一定要获取到真实的数据，否则返回null。</p><p><strong>Hibernate中怎样实现类之间的关系?(如：一对多、多对多的关系)</strong></p><p>类与类之间的关系主要体现在表与表之间的关系进行操作，它们都市对对象进行操作，我们程序中把所有的表与类都映射在一起，它们通过配置文件中的many-to-one、one-to-many、many-to-many、</p><p><strong>说下Hibernate的缓存机制：</strong></p><p>Hibernate缓存的作用：    Hibernate是一个持久层框架，经常访问物理数据库，为了降低应用程序对物理数据源访问的频次，从而提高应用程序的运行性能。缓存内的数据是对物理数据源中的数据的复制，应用程序在运行时从缓存读写数据，在特定的时刻或事件会同步缓存和物理数据源的数据 Hibernate缓存分类：  Hibernate缓存包括两大类：Hibernate一级缓存和Hibernate二级缓存 Hibernate一级缓存又称为“Session的缓存”，它是内置的，意思就是说，只要你使用hibernate就必须使用session缓存。由于Session对象的生命周期通常对应一个数据库事务或者一个应用事务，因此它的缓存是事务范围的缓存。在第一级缓存中，持久化类的每个实例都具有唯一的OID。  Hibernate二级缓存又称为“SessionFactory的缓存”，由于SessionFactory对象的生命周期和应用程序的整个过程对应，因此Hibernate二级缓存是进程范围或者集群范围的缓存，有可能出现并发问题，因此需要采用适当的并发访问策略，该策略为被缓存的数据提供了事务隔离级别。第二级缓存是可选的，是一个可配置的插件，在默认情况下，SessionFactory不会启用这个插件。 什么样的数据适合存放到第二级缓存中？ 　　 1 很少被修改的数据 　　 2 不是很重要的数据，允许出现偶尔并发的数据 　　 3 不会被并发访问的数据 　　 4 常量数据 　　 不适合存放到第二级缓存的数据？ 　　 1经常被修改的数据 　　 2 .绝对不允许出现并发访问的数据，如财务数据，绝对不允许出现并发 　　 3 与其他应用共享的数据。  Hibernate查找对象如何应用缓存？ 当Hibernate根据ID访问数据对象的时候，首先从Session一级缓存中查；查不到，如果配置了二级缓存，那么从二级缓存中查；如果都查不到，再查询数据库，把结果按照ID放入到缓存 删除、更新、增加数据的时候，同时更新缓存 Hibernate管理缓存实例 无论何时，我们在管理Hibernate缓存（Managing the caches）时，当你给save()、update()或saveOrUpdate()方法传递一个对象时，或使用load()、 get()、list()、iterate() 或scroll()方法获得一个对象时, 该对象都将被加入到Session的内部缓存中。  当随后flush()方法被调用时，对象的状态会和数据库取得同步。 如果你不希望此同步操作发生，或者你正处理大量对象、需要对有效管理内存时，你可以调用evict() 方法，从一级缓存中去掉这些对象及其集合。 </p><p> <strong>Hibernate的查询方式</strong></p><p>Sql、Criteria,object comptosition</p><p>Hql：</p><p>1、 属性查询</p><p>2、 参数查询、命名参数查询</p><p>3、 关联查询</p><p>4、 分页查询</p><p>5、 统计函数</p><p> <strong>如何优化Hibernate？</strong></p><p>1.使用双向一对多关联，不使用单向一对多</p><p>2.灵活使用单向一对多关联</p><p>3.不用一对一，用多对一取代</p><p>4.配置对象缓存，不使用集合缓存</p><p>5.一对多集合使用Bag,多对多集合使用Set</p><p>\6. 继承类使用显式多态</p><p>\7. 表字段要少，表关联不要怕多，有二级缓存撑腰</p><p>hibernate的开发步骤：</p><p>开发步骤</p><p>   1)搭建好环境</p><p>​     引入hibernate最小的jar包</p><p>​     准备Hibernate.cfg.xml启动配置文件</p><p>   2)写实体类(pojo)</p><p>   3)为实体类写映射文件”User.hbm.xml”</p><p>​     在hibernate.cfg.xml添加映射的实体</p><p>   4)创建库表</p><p>   5)写测试类</p><p>​     获得Configuration</p><p>​     创建SessionFactory</p><p>​     打开Session</p><p>​     开启事务</p><p>​     使用session操作数据</p><p>​     提交事务</p><p>​     关闭资源</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;hibernate工作原理及作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2015年08月04日 15:00:17 &lt;a href=&quot;https://me.csdn.net/u010197033&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;进击的
      
    
    </summary>
    
    
    
      <category term="hibernate" scheme="https://Conanisbest.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>JVM 发生 OOM 的 8 种原因、及解决办法</title>
    <link href="https://conanisbest.github.io/2020/07/02/three/"/>
    <id>https://conanisbest.github.io/2020/07/02/three/</id>
    <published>2020-07-02T07:26:13.000Z</published>
    <updated>2020-07-03T08:17:04.826Z</updated>
    
    <content type="html"><![CDATA[<p>JVM 发生 OOM（out of memory 内存溢出） 的 8 种原因、及解决办法</p><p><img src="/2020/07/02/three/Users/Administrator/AppData/Local/YNote/data/qq603F12696BD3B57EFA011C366B93AE8F/907d65c92f7e465c8276609ee42bf528/640.webp" alt="img"></p><p><img src="/2020/07/02/three/Users/Administrator/AppData/Local/YNote/data/qq603F12696BD3B57EFA011C366B93AE8F/901a96b40894432389f62ab463cc4611/640.webp" alt="img"></p><p>来源：<a href="http://www.importnew.com/author/tangyouhua" target="_blank" rel="noopener">www.importnew.com/author/tangyouhua</a></p><p><strong>1. Java 堆空间</strong></p><p><strong>发生频率：</strong>5颗星</p><p><strong>造成原因</strong></p><ul><li>无法在 Java 堆中分配对象</li><li>吞吐量增加</li><li>应用程序无意中保存了对象引用，对象无法被 GC 回收</li><li>应用程序过度使用 finalizer。finalizer 对象不能被 GC 立刻回收。finalizer 由结束队列服务的守护线程调用，有时 finalizer 线程的处理能力无法跟上结束队列的增长</li></ul><p><strong>解决方案</strong></p><ul><li>使用 -Xmx 增加堆大小</li><li>修复应用程序中的内存泄漏</li></ul><p><strong>2. GC 开销超过限制</strong></p><p><strong>发生频率：</strong>5颗星</p><p><strong>造成原因</strong></p><ul><li>Java 进程98%的时间在进行垃圾回收，恢复了不到2%的堆空间，最后连续5个（编译时常量）垃圾回收一直如此。</li></ul><p><strong>解决方案</strong></p><ul><li>使用 -Xmx 增加堆大小</li><li>使用 -XX:-UseGCOverheadLimit 取消 GC 开销限制</li><li>修复应用程序中的内存泄漏</li></ul><p><strong>3. 请求的数组大小超过虚拟机限制</strong></p><p><strong>发生频率：</strong>2颗星</p><p><strong>造成原因</strong></p><ul><li>应用程序试图分配一个超过堆大小的数组</li></ul><p><strong>解决方案</strong></p><ul><li>使用 -Xmx 增加堆大小</li><li>修复应用程序中分配巨大数组的 bug</li></ul><p><strong>4. Perm gen 空间</strong></p><p><strong>发生频率：</strong>3颗星</p><p><strong>造成原因</strong></p><p>Perm gen 空间包含：</p><ul><li>类的名字、字段、方法</li><li>与类相关的对象数组和类型数组</li><li>JIT 编译器优化</li></ul><p>当 Perm gen 空间用尽时，将抛出异常。</p><p><strong>解决方案</strong></p><ul><li>使用 -XX: MaxPermSize 增加 Permgen 大小</li><li>不重启应用部署应用程序可能会导致此问题。重启 JVM 解决</li></ul><p><strong>5. Metaspace</strong></p><p><strong>发生频率：</strong>3颗星</p><p><strong>造成原因</strong></p><ul><li>从 Java 8 开始 Perm gen 改成了 Metaspace，在本机内存中分配 class 元数据（称为 metaspace）。如果 metaspace 耗尽，则抛出异常</li></ul><p><strong>解决方案</strong></p><ul><li>通过命令行设置 -XX: MaxMetaSpaceSize 增加 metaspace 大小</li><li>取消 -XX: maxmetsspacedize</li><li>减小 Java 堆大小,为 MetaSpace 提供更多的可用空间</li><li>为服务器分配更多的内存</li><li>可能是应用程序 bug，修复 bug</li></ul><p><strong>6. 无法新建本机线程</strong></p><p><strong>发生频率：</strong>5颗星</p><p><strong>造成原因</strong></p><ul><li>内存不足，无法创建新线程。由于线程在本机内存中创建，报告这个错误表明本机内存空间不足</li></ul><p><strong>解决方案</strong></p><ul><li><p>为机器分配更多的内存</p></li><li><p>减少 Java 堆空间</p></li><li><p>修复应用程序中的线程泄漏。</p></li><li><p>增加操作系统级别的限制</p></li><li><ul><li>ulimit -a</li><li>用户进程数增大 (-u) 1800</li></ul></li><li><p>使用 -Xss 减小线程堆栈大小</p></li></ul><p><strong>7. 杀死进程或子进程</strong></p><p><strong>发生频率：</strong>1颗星</p><p><strong>造成原因</strong></p><ul><li>内核任务：内存不足结束器，在可用内存极低的情况下会杀死进程</li></ul><p><strong>解决方案</strong></p><ul><li>将进程迁移到不同的机器上</li><li>给机器增加更多内存</li></ul><p>与其他 OOM 错误不同，这是由操作系统而非 JVM 触发的。</p><p><strong>8. 发生 stack_trace_with_native_method</strong></p><p><strong>发生频率：</strong>1颗星</p><p><strong>造成原因</strong></p><ul><li>本机方法（native method）分配失败</li><li>打印的堆栈跟踪信息，最顶层的帧是本机方法</li></ul><p><strong>解决方案</strong></p><p>使用操作系统本地工具进行诊断</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JVM 发生 OOM（out of memory 内存溢出） 的 8 种原因、及解决办法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/07/02/three/Users/Administrator/AppData/Local/YNote/data/qq603F12696B
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="https://Conanisbest.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程学习</title>
    <link href="https://conanisbest.github.io/2020/07/02/second/"/>
    <id>https://conanisbest.github.io/2020/07/02/second/</id>
    <published>2020-07-02T07:18:50.000Z</published>
    <updated>2020-07-03T08:16:44.278Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lwbqqyumidi/p/3804883.html" target="_blank" rel="noopener"><strong>Java总结篇系列：Java多线程（一）</strong></a></p><p>多线程作为Java中很重要的一个知识点，在此还是有必要总结一下的。</p><p><strong>一.线程的生命周期及五种基本状态</strong></p><p>关于Java中线程的生命周期，首先看一下下面这张较为经典的图：</p><p><img src="/2020/07/02/second/Users/Administrator/AppData/Local/YNote/data/qq603F12696BD3B57EFA011C366B93AE8F/db1bed93290b4791a8d98f1706a78eb7/02051747387.jpeg" alt="img"></p><p>上图中基本上囊括了Java中多线程各重要知识点。掌握了上图中的各知识点，Java中的多线程也就基本上掌握了。主要包括：</p><p><strong>Java线程具有五种基本状态</strong></p><p><strong>新建状态（New）：</strong>当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread();</p><p><strong>就绪状态（Runnable）：</strong>当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行；</p><p><strong>运行状态（Running）：</strong>当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中；</p><p><strong>阻塞状态（Blocked）：</strong>处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：</p><p>1.等待阻塞：运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；</p><p>2.同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；</p><p>3.其他阻塞 – 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</p><p><strong>死亡状态（Dead）：</strong>线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p><p><strong>二. Java多线程的创建及启动</strong></p><p>Java中线程的创建常见有如三种基本形式</p><p><strong>1.继承Thread类，重写该类的run()方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span>     <span class="meta">@Override</span></span><br><span class="line"> <span class="number">6</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">7</span>         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">8</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"> <span class="number">9</span>         &#125;</span><br><span class="line"><span class="number">10</span>     &#125;</span><br><span class="line"><span class="number">11</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">5</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"> <span class="number">6</span>             <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"> <span class="number">7</span>                 Th;                     <span class="comment">// 调用start()方法使得线程进入就绪状态</span></span><br><span class="line"><span class="number">11</span>             &#125;</span><br><span class="line"><span class="number">12</span>         &#125;</span><br><span class="line"><span class="number">13</span>     &#125;</span><br><span class="line"><span class="number">14</span> &#125;</span><br><span class="line">read myThread1 = <span class="keyword">new</span> MyThread();     <span class="comment">// 创建一个新的线程  myThread1  此线程进入新建状态</span></span><br><span class="line"> <span class="number">8</span>                 Thread myThread2 = <span class="keyword">new</span> MyThread();     <span class="comment">// 创建一个新的线程 myThread2 此线程进入新建状态</span></span><br><span class="line"> <span class="number">9</span>                 myThread1.start();                     <span class="comment">// 调用start()方法使得线程进入就绪状态</span></span><br><span class="line"><span class="number">10</span>                 myThread2.start()</span><br></pre></td></tr></table></figure><p>如上所示，继承Thread类，通过重写run()方法定义了一个新的线程类MyThread，其中run()方法的方法体代表了线程需要完成的任务，称之为线程执行体。当创建此线程类对象时一个新的线程得以创建，并进入到线程新建状态。通过调用线程对象引用的start()方法，使得该线程进入到就绪状态，此时此线程并不一定会马上得以执行，这取决于CPU调度时机。</p><p><strong>2.实现Runnable接口，并重写该接口的run()方法，该run()方法同样是线程执行体，创建Runnable实现类的实例，并以此实例作为Thread类的target来创建Thread对象，该Thread对象才是真正的线程对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span>     <span class="meta">@Override</span></span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">7</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"> <span class="number">8</span>         &#125;</span><br><span class="line"> <span class="number">9</span>     &#125;</span><br><span class="line"><span class="number">10</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">5</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"> <span class="number">6</span>             <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"> <span class="number">7</span>                 Runnable myRunnable = <span class="keyword">new</span> MyRunnable(); <span class="comment">// 创建一个Runnable实现类的对象</span></span><br><span class="line"> <span class="number">8</span>                 Thread thread1 = <span class="keyword">new</span> Thread(myRunnable); <span class="comment">// 将myRunnable作为Thread target创建新的线程</span></span><br><span class="line"> <span class="number">9</span>                 Thread thread2 = <span class="keyword">new</span> Thread(myRunnable);</span><br><span class="line"><span class="number">10</span>                 thread1.start(); <span class="comment">// 调用start()方法使得线程进入就绪状态</span></span><br><span class="line"><span class="number">11</span>                 thread2.start();</span><br><span class="line"><span class="number">12</span>             &#125;</span><br><span class="line"><span class="number">13</span>         &#125;</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"><span class="number">15</span> &#125;</span><br></pre></td></tr></table></figure><p>相信以上两种创建新线程的方式大家都很熟悉了，那么Thread和Runnable之间到底是什么关系呢？我们首先来看一下下面这个例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">5</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"> <span class="number">6</span>             <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"> <span class="number">7</span>                 Runnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"> <span class="number">8</span>                 Thread thread = <span class="keyword">new</span> MyThread(myRunnable);</span><br><span class="line"> <span class="number">9</span>                 thread.start();</span><br><span class="line"><span class="number">10</span>             &#125;</span><br><span class="line"><span class="number">11</span>         &#125;</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> &#125;</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="number">16</span>     <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">19</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">20</span>         System.out.println(<span class="string">"in MyRunnable run"</span>);</span><br><span class="line"><span class="number">21</span>         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">22</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">23</span>         &#125;</span><br><span class="line"><span class="number">24</span>     &#125;</span><br><span class="line"><span class="number">25</span> &#125;</span><br><span class="line"><span class="number">26</span> </span><br><span class="line"><span class="number">27</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="number">28</span> </span><br><span class="line"><span class="number">29</span>     <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="number">30</span>     </span><br><span class="line"><span class="number">31</span>     <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Runnable runnable)</span></span>&#123;</span><br><span class="line"><span class="number">32</span>         <span class="keyword">super</span>(runnable);</span><br><span class="line"><span class="number">33</span>     &#125;</span><br><span class="line"><span class="number">34</span> </span><br><span class="line"><span class="number">35</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">36</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">37</span>         System.out.println(<span class="string">"in MyThread run"</span>);</span><br><span class="line"><span class="number">38</span>         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">39</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">40</span>         &#125;</span><br><span class="line"><span class="number">41</span>     &#125;</span><br><span class="line"><span class="number">42</span> &#125;</span><br></pre></td></tr></table></figure><p>同样的，与实现Runnable接口创建线程方式相似，不同的地方在于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> Thread thread = <span class="keyword">new</span> MyThread(myRunnable);</span><br></pre></td></tr></table></figure><p>那么这种方式可以顺利创建出一个新的线程么？答案是肯定的。至于此时的线程执行体到底是MyRunnable接口中的run()方法还是MyThread类中的run()方法呢？通过输出我们知道线程执行体是MyThread类中的run()方法。其实原因很简单，因为Thread类本身也是实现了Runnable接口，而run()方法最先是在Runnable接口中定义的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>    </span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">4</span>     </span><br><span class="line"><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure><p>我们看一下Thread类中对Runnable接口中run()方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，当执行到Thread类中的run()方法时，会首先判断target是否存在，存在则执行target中的run()方法，也就是实现了Runnable接口并重写了run()方法的类中的run()方法。但是上述给到的列子中，由于多态的存在，根本就没有执行到Thread类中的run()方法，而是直接先执行了运行时类型即MyThread类中的run()方法。</p><p><strong>3.使用Callable和Future接口创建线程。具体是创建Callable接口的实现类，并实现clall()方法。并使用FutureTask类来包装Callable实现类的对象，且以此FutureTask对象作为Thread对象的target来创建线程。</strong></p><p> 看着好像有点复杂，直接来看一个例子就清晰了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span>         Callable&lt;Integer&gt; myCallable = <span class="keyword">new</span> MyCallable();    <span class="comment">// 创建MyCallable对象</span></span><br><span class="line"> <span class="number">6</span>         FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(myCallable); <span class="comment">//使用FutureTask来包装MyCallable对象</span></span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">9</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">10</span>             <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"><span class="number">11</span>                 Thread thread = <span class="keyword">new</span> Thread(ft);   <span class="comment">//FutureTask对象作为Thread对象的target创建新的线程</span></span><br><span class="line"><span class="number">12</span>                 thread.start();                      <span class="comment">//线程进入到就绪状态</span></span><br><span class="line"><span class="number">13</span>             &#125;</span><br><span class="line"><span class="number">14</span>         &#125;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span>         System.out.println(<span class="string">"主线程for循环执行完毕.."</span>);</span><br><span class="line"><span class="number">17</span>         </span><br><span class="line"><span class="number">18</span>         <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">19</span>             <span class="keyword">int</span> sum = ft.get();            <span class="comment">//取得新创建的新线程中的call()方法返回的结果</span></span><br><span class="line"><span class="number">20</span>             System.out.println(<span class="string">"sum = "</span> + sum);</span><br><span class="line"><span class="number">21</span>         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">22</span>             e.printStackTrace();</span><br><span class="line"><span class="number">23</span>         &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line"><span class="number">24</span>             e.printStackTrace();</span><br><span class="line"><span class="number">25</span>         &#125;</span><br><span class="line"><span class="number">26</span> </span><br><span class="line"><span class="number">27</span>     &#125;</span><br><span class="line"><span class="number">28</span> &#125;</span><br><span class="line"><span class="number">29</span> </span><br><span class="line"><span class="number">30</span> </span><br><span class="line"><span class="number">31</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"><span class="number">32</span>     <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="number">33</span> </span><br><span class="line"><span class="number">34</span>     <span class="comment">// 与run()方法不同的是，call()方法具有返回值</span></span><br><span class="line"><span class="number">35</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">36</span>     <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">37</span>         <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="number">38</span>         <span class="keyword">for</span> (; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">39</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">40</span>             sum += i;</span><br><span class="line"><span class="number">41</span>         &#125;</span><br><span class="line"><span class="number">42</span>         <span class="keyword">return</span> sum;</span><br><span class="line"><span class="number">43</span>     &#125;</span><br><span class="line"><span class="number">44</span> </span><br><span class="line"><span class="number">45</span> &#125;</span><br></pre></td></tr></table></figure><p>首先，我们发现，在实现Callable接口中，此时不再是run()方法了，而是call()方法，此call()方法作为线程执行体，同时还具有返回值！在创建新的线程时，是通过FutureTask来包装MyCallable对象，同时作为了Thread对象的target。那么看下FutureTask类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"><span class="number">2</span>     </span><br><span class="line"><span class="number">3</span>     <span class="comment">//....</span></span><br><span class="line"><span class="number">4</span>     </span><br><span class="line"><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"><span class="number">2</span>     </span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">4</span>     </span><br><span class="line"><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure><p>于是，我们发现FutureTask类实际上是同时实现了Runnable和Future接口，由此才使得其具有Future和Runnable双重特性。通过Runnable特性，可以作为Thread对象的target，而Future特性，使得其可以取得新创建线程中的call()方法的返回值。</p><p>执行下此程序，我们发现sum = 4950永远都是最后输出的。而“主线程for循环执行完毕..”则很可能是在子线程循环中间输出。由CPU的线程调度机制，我们知道，“主线程for循环执行完毕..”的输出时机是没有任何问题的，那么为什么sum =4950会永远最后输出呢？</p><p>原因在于通过ft.get()方法获取子线程call()方法的返回值时，当子线程此方法还未执行完毕，ft.get()方法会一直阻塞，直到call()方法执行完毕才能取到返回值。</p><p>上述主要讲解了三种常见的线程创建方式，对于线程的启动而言，都是调用线程对象的start()方法，需要特别注意的是：<strong>不能对同一线程对象两次调用start()方法。</strong></p><p><strong>三. Java多线程的就绪、运行和死亡状态</strong></p><p>就绪状态转换为运行状态：当此线程得到处理器资源；</p><p>运行状态转换为就绪状态：当此线程主动调用yield()方法或在运行过程中失去处理器资源。</p><p>运行状态转换为死亡状态：当此线程线程执行体执行完毕或发生了异常。</p><p>此处需要特别注意的是：当调用线程的yield()方法时，线程从运行状态转换为就绪状态，但接下来CPU调度就绪状态中的哪个线程具有一定的随机性，因此，可能会出现A线程调用了yield()方法后，接下来CPU仍然调度了A线程的情况。</p><p>由于实际的业务需要，常常会遇到需要在特定时机终止某一线程的运行，使其进入到死亡状态。目前最通用的做法是设置一boolean型的变量，当条件满足时，使线程执行体快速执行完毕。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span>         MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"> <span class="number">6</span>         Thread thread = <span class="keyword">new</span> Thread(myRunnable);</span><br><span class="line"> <span class="number">7</span>         </span><br><span class="line"> <span class="number">8</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">9</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">10</span>             <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"><span class="number">11</span>                 thread.start();</span><br><span class="line"><span class="number">12</span>             &#125;</span><br><span class="line"><span class="number">13</span>             <span class="keyword">if</span>(i == <span class="number">40</span>)&#123;</span><br><span class="line"><span class="number">14</span>                 myRunnable.stopThread();</span><br><span class="line"><span class="number">15</span>             &#125;</span><br><span class="line"><span class="number">16</span>         &#125;</span><br><span class="line"><span class="number">17</span>     &#125;</span><br><span class="line"><span class="number">18</span> &#125;</span><br><span class="line"><span class="number">19</span> </span><br><span class="line"><span class="number">20</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="number">21</span> </span><br><span class="line"><span class="number">22</span>     <span class="keyword">private</span> <span class="keyword">boolean</span> stop;</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">25</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">26</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span> &amp;&amp; !stop; i++) &#123;</span><br><span class="line"><span class="number">27</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">28</span>         &#125;</span><br><span class="line"><span class="number">29</span>     &#125;</span><br><span class="line"><span class="number">30</span> </span><br><span class="line"><span class="number">31</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">32</span>         <span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">33</span>     &#125;</span><br><span class="line"><span class="number">34</span> </span><br><span class="line"><span class="number">35</span> &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/02/second/Users/Administrator/AppData/Local/YNote/data/qq603F12696BD3B57EFA011C366B93AE8F/31c67ae1d2aa43ee82114a46fb9689b8/copycode.gif" alt="img"></p><p><a href="https://www.cnblogs.com/lwbqqyumidi/p/3817517.html" target="_blank" rel="noopener"><strong>Java总结篇系列：Java多线程（二）</strong></a></p><p>本文承接上一篇文章<a href="http://www.cnblogs.com/lwbqqyumidi/p/3804883.html" target="_blank" rel="noopener">《Java总结篇系列：Java多线程（一）》</a>。</p><p><strong>四.Java多线程的阻塞状态与线程控制</strong></p><p>上文已经提到Java阻塞的几种具体类型。下面分别看下引起Java线程阻塞的主要方法。</p><p><strong>1.join()</strong></p><p>join —— 让一个线程等待另一个线程完成才继续执行。如A线程线程执行体中调用B线程的join()方法，则A线程被阻塞，知道B线程执行完为止，A才能得以继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span>         MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"> <span class="number">6</span>         Thread thread = <span class="keyword">new</span> Thread(myRunnable);</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">9</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">10</span>             <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"><span class="number">11</span>                 thread.start();</span><br><span class="line"><span class="number">12</span>                 <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">13</span>                     thread.join();    <span class="comment">// main线程需要等待thread线程执行完后才能继续执行</span></span><br><span class="line"><span class="number">14</span>                 &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">15</span>                     e.printStackTrace();</span><br><span class="line"><span class="number">16</span>                 &#125;</span><br><span class="line"><span class="number">17</span>             &#125;</span><br><span class="line"><span class="number">18</span>         &#125;</span><br><span class="line"><span class="number">19</span>     &#125;</span><br><span class="line"><span class="number">20</span> &#125;</span><br><span class="line"><span class="number">21</span> </span><br><span class="line"><span class="number">22</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">25</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">26</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">27</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">28</span>         &#125;</span><br><span class="line"><span class="number">29</span>     &#125;</span><br><span class="line"><span class="number">30</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>2.sleep()</strong></p><p>sleep —— 让当前的正在执行的线程暂停指定的时间，并进入阻塞状态。在其睡眠的时间段内，该线程由于不是处于就绪状态，因此不会得到执行的机会。即使此时系统中没有任何其他可执行的线程，出于sleep()中的线程也不会执行。因此sleep()方法常用来暂停线程执行。</p><p>前面有讲到，当调用了新建的线程的start()方法后，线程进入到就绪状态，可能会在接下来的某个时间获取CPU时间片得以执行，如果希望这个新线程必然性的立即执行，直接调用原来线程的sleep(1)即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span>         MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"> <span class="number">6</span>         Thread thread = <span class="keyword">new</span> Thread(myRunnable);</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">9</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">10</span>             <span class="keyword">if</span> (i == <span class="number">30</span>) &#123;</span><br><span class="line"><span class="number">11</span>                 thread.start();</span><br><span class="line"><span class="number">12</span>                 <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">13</span>                     Thread.sleep(<span class="number">1</span>);   <span class="comment">// 使得thread必然能够马上得以执行</span></span><br><span class="line"><span class="number">14</span>                 &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">15</span>                     e.printStackTrace();</span><br><span class="line"><span class="number">16</span>                 &#125;</span><br><span class="line"><span class="number">17</span>             &#125;</span><br><span class="line"><span class="number">18</span>         &#125;</span><br><span class="line"><span class="number">19</span>     &#125;</span><br><span class="line"><span class="number">20</span> &#125;</span><br><span class="line"><span class="number">21</span> </span><br><span class="line"><span class="number">22</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">25</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">26</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">27</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</span><br><span class="line"><span class="number">28</span>         &#125;</span><br><span class="line"><span class="number">29</span>     &#125;</span><br><span class="line"><span class="number">30</span> &#125;</span><br></pre></td></tr></table></figure><p>注：睡一个毫秒级够了，因为CPU不会空闲，会切换到新建的线程。</p><p><strong>3.后台线程（Daemon Thread）</strong></p><p>概念/目的：后台线程主要是为其他线程（相对可以称之为前台线程）提供服务，或“守护线程”。如JVM中的垃圾回收线程。</p><p>生命周期：后台线程的生命周期与前台线程生命周期有一定关联。主要体现在：当所有的前台线程都进入死亡状态时，后台线程会自动死亡(其实这个也很好理解，因为后台线程存在的目的在于为前台线程服务的，既然所有的前台线程都死亡了，那它自己还留着有什么用…伟大啊 ! !)。</p><p>设置后台线程：调用Thread对象的setDaemon(true)方法可以将指定的线程设置为后台线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Thread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line"> <span class="number">5</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">6</span>             System.out.println(<span class="string">"main thread i = "</span> + i);</span><br><span class="line"> <span class="number">7</span>             <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line"> <span class="number">8</span>                 myThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"> <span class="number">9</span>                 myThread.start();</span><br><span class="line"><span class="number">10</span>             &#125;</span><br><span class="line"><span class="number">11</span>         &#125;</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> &#125;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">19</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">20</span>             System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line"><span class="number">21</span>             <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">22</span>                 Thread.sleep(<span class="number">1</span>);</span><br><span class="line"><span class="number">23</span>             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">24</span>                 <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"><span class="number">25</span>                 e.printStackTrace();</span><br><span class="line"><span class="number">26</span>             &#125;</span><br><span class="line"><span class="number">27</span>         &#125;</span><br><span class="line"><span class="number">28</span>     &#125;</span><br><span class="line"><span class="number">29</span> &#125;</span><br></pre></td></tr></table></figure><p>判断线程是否是后台线程：调用thread对象的isDeamon()方法。</p><p>注：main线程默认是前台线程，前台线程创建中创建的子线程默认是前台线程，后台线程中创建的线程默认是后台线程。调用setDeamon(true)方法将前台线程设置为后台线程时，需要在start()方法调用之前。前天线程都死亡后，JVM通知后台线程死亡，但从接收指令到作出响应，需要一定的时间。</p><p><strong>4.改变线程的优先级/setPriority()：</strong></p><p>每个线程在执行时都具有一定的优先级，优先级高的线程具有较多的执行机会。每个线程默认的优先级都与创建它的线程的优先级相同。main线程默认具有普通优先级。</p><p>设置线程优先级：setPriority(int priorityLevel)。参数priorityLevel范围在1-10之间，常用的有如下三个静态常量值：</p><p>MAX_PRIORITY:10</p><p>MIN_PRIORITY:1</p><p>NORM_PRIORITY:5</p><p>获取线程优先级：getPriority()。</p><p><strong>注：具有较高线程优先级的线程对象仅表示此线程具有较多的执行机会，而非优先执行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Thread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line"> <span class="number">5</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">6</span>             System.out.println(<span class="string">"main thread i = "</span> + i);</span><br><span class="line"> <span class="number">7</span>             <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line"> <span class="number">8</span>                 myThread.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"> <span class="number">9</span>                 myThread.start();</span><br><span class="line"><span class="number">10</span>             &#125;</span><br><span class="line"><span class="number">11</span>         &#125;</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> &#125;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">19</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">20</span>             System.out.println(<span class="string">"i = "</span> + i);</span><br><span class="line"><span class="number">21</span>         &#125;</span><br><span class="line"><span class="number">22</span>     &#125;</span><br><span class="line"><span class="number">23</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>5.线程让步：yield()</strong></p><p>上一篇博文中已经讲到了yield()的基本作用，同时，yield()方法还与线程优先级有关，当某个线程调用yiled()方法从运行状态转换到就绪状态后，CPU从就绪状态线程队列中只会选择与该线程优先级相同或优先级更高的线程去执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Thread myThread1 = <span class="keyword">new</span> MyThread1();</span><br><span class="line"> <span class="number">5</span>         Thread myThread2 = <span class="keyword">new</span> MyThread2();</span><br><span class="line"> <span class="number">6</span>         myThread1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"> <span class="number">7</span>         myThread2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"> <span class="number">8</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">9</span>             System.out.println(<span class="string">"main thread i = "</span> + i);</span><br><span class="line"><span class="number">10</span>             <span class="keyword">if</span> (i == <span class="number">20</span>) &#123;</span><br><span class="line"><span class="number">11</span>                 myThread1.start();</span><br><span class="line"><span class="number">12</span>                 myThread2.start();</span><br><span class="line"><span class="number">13</span>                 Thread.yield();</span><br><span class="line"><span class="number">14</span>             &#125;</span><br><span class="line"><span class="number">15</span>         &#125;</span><br><span class="line"><span class="number">16</span>     &#125;</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span> &#125;</span><br><span class="line"><span class="number">19</span> </span><br><span class="line"><span class="number">20</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="number">21</span> </span><br><span class="line"><span class="number">22</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">23</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">24</span>             System.out.println(<span class="string">"myThread 1 --  i = "</span> + i);</span><br><span class="line"><span class="number">25</span>         &#125;</span><br><span class="line"><span class="number">26</span>     &#125;</span><br><span class="line"><span class="number">27</span> &#125;</span><br><span class="line"><span class="number">28</span> </span><br><span class="line"><span class="number">29</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="number">30</span> </span><br><span class="line"><span class="number">31</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">32</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="number">33</span>             System.out.println(<span class="string">"myThread 2 --  i = "</span> + i);</span><br><span class="line"><span class="number">34</span>         &#125;</span><br><span class="line"><span class="number">35</span>     &#125;</span><br><span class="line"><span class="number">36</span> &#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/lwbqqyumidi/p/3821389.html" target="_blank" rel="noopener"><strong>Java总结篇系列：Java多线程（三）</strong></a></p><p>本文主要接着前面多线程的两篇文章总结Java多线程中的线程安全问题。</p><p><strong>一.一个典型的Java线程安全例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Account account = <span class="keyword">new</span> Account(<span class="string">"123456"</span>, <span class="number">1000</span>);</span><br><span class="line"> <span class="number">5</span>         DrawMoneyRunnable drawMoneyRunnable = <span class="keyword">new</span> DrawMoneyRunnable(account, <span class="number">700</span>);</span><br><span class="line"> <span class="number">6</span>         Thread myThread1 = <span class="keyword">new</span> Thread(drawMoneyRunnable);</span><br><span class="line"> <span class="number">7</span>         Thread myThread2 = <span class="keyword">new</span> Thread(drawMoneyRunnable);</span><br><span class="line"> <span class="number">8</span>         myThread1.start();</span><br><span class="line"> <span class="number">9</span>         myThread2.start();</span><br><span class="line"><span class="number">10</span>     &#125;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> &#125;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawMoneyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span>     <span class="keyword">private</span> Account account;</span><br><span class="line"><span class="number">17</span>     <span class="keyword">private</span> <span class="keyword">double</span> drawAmount;</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span>     <span class="function"><span class="keyword">public</span> <span class="title">DrawMoneyRunnable</span><span class="params">(Account account, <span class="keyword">double</span> drawAmount)</span> </span>&#123;</span><br><span class="line"><span class="number">20</span>         <span class="keyword">super</span>();</span><br><span class="line"><span class="number">21</span>         <span class="keyword">this</span>.account = account;</span><br><span class="line"><span class="number">22</span>         <span class="keyword">this</span>.drawAmount = drawAmount;</span><br><span class="line"><span class="number">23</span>     &#125;</span><br><span class="line"><span class="number">24</span> </span><br><span class="line"><span class="number">25</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">26</span>         <span class="keyword">if</span> (account.getBalance() &gt;= drawAmount) &#123;  <span class="comment">//1</span></span><br><span class="line"><span class="number">27</span>             System.out.println(<span class="string">"取钱成功， 取出钱数为："</span> + drawAmount);</span><br><span class="line"><span class="number">28</span>             <span class="keyword">double</span> balance = account.getBalance() - drawAmount;</span><br><span class="line"><span class="number">29</span>             account.setBalance(balance);</span><br><span class="line"><span class="number">30</span>             System.out.println(<span class="string">"余额为："</span> + balance);</span><br><span class="line"><span class="number">31</span>         &#125;</span><br><span class="line"><span class="number">32</span>     &#125;</span><br><span class="line"><span class="number">33</span> &#125;</span><br><span class="line"><span class="number">34</span> </span><br><span class="line"><span class="number">35</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"><span class="number">36</span> </span><br><span class="line"><span class="number">37</span>     <span class="keyword">private</span> String accountNo;</span><br><span class="line"><span class="number">38</span>     <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"><span class="number">39</span> </span><br><span class="line"><span class="number">40</span>     <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">41</span> </span><br><span class="line"><span class="number">42</span>     &#125;</span><br><span class="line"><span class="number">43</span> </span><br><span class="line"><span class="number">44</span>     <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String accountNo, <span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line"><span class="number">45</span>         <span class="keyword">this</span>.accountNo = accountNo;</span><br><span class="line"><span class="number">46</span>         <span class="keyword">this</span>.balance = balance;</span><br><span class="line"><span class="number">47</span>     &#125;</span><br><span class="line"><span class="number">48</span> </span><br><span class="line"><span class="number">49</span>     <span class="function"><span class="keyword">public</span> String <span class="title">getAccountNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">50</span>         <span class="keyword">return</span> accountNo;</span><br><span class="line"><span class="number">51</span>     &#125;</span><br><span class="line"><span class="number">52</span> </span><br><span class="line"><span class="number">53</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountNo</span><span class="params">(String accountNo)</span> </span>&#123;</span><br><span class="line"><span class="number">54</span>         <span class="keyword">this</span>.accountNo = accountNo;</span><br><span class="line"><span class="number">55</span>     &#125;</span><br><span class="line"><span class="number">56</span> </span><br><span class="line"><span class="number">57</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">58</span>         <span class="keyword">return</span> balance;</span><br><span class="line"><span class="number">59</span>     &#125;</span><br><span class="line"><span class="number">60</span> </span><br><span class="line"><span class="number">61</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line"><span class="number">62</span>         <span class="keyword">this</span>.balance = balance;</span><br><span class="line"><span class="number">63</span>     &#125;</span><br><span class="line"><span class="number">64</span> </span><br><span class="line"><span class="number">65</span> &#125;</span><br></pre></td></tr></table></figure><p>上面例子很容易理解，有一张银行卡，里面有1000的余额，程序模拟你和你老婆同时在取款机进行取钱操作的场景。多次运行此程序，可能具有多个不同组合的输出结果。其中一种可能的输出为：</p><p>1 取钱成功， 取出钱数为：700.0 2 余额为：300.0 3 取钱成功， 取出钱数为：700.0 4 余额为：-400.0</p><p>也就是说，对于一张只有1000余额的银行卡，你们一共可以取出1400，这显然是有问题的。</p><p>经过分析，问题在于Java多线程环境下的执行的不确定性。CPU可能随机的在多个处于就绪状态中的线程中进行切换，因此，很有可能出现如下情况：当thread1执行到//1处代码时，判断条件为true，此时CPU切换到thread2，执行//1处代码，发现依然为真，然后执行完thread2，接着切换到thread1，接着执行完毕。此时，就会出现上述结果。</p><p>因此，讲到线程安全问题，其实是指多线程环境下对共享资源的访问可能会引起此共享资源的不一致性。因此，为避免线程安全问题，应该避免多线程环境下对此共享资源的并发访问。</p><p><strong>二.同步方法</strong></p><p>对共享资源进行访问的方法定义中加上synchronized关键字修饰，使得此方法称为同步方法。可以简单理解成对此方法进行了加锁，其锁对象为当前方法所在的对象自身。多线程环境下，当执行此方法时，首先都要获得此同步锁（且同时最多只有一个线程能够获得），只有当线程执行完此同步方法后，才会释放锁对象，其他的线程才有可能获取此同步锁，以此类推…</p><p>在上例中，共享资源为account对象，当使用同步方法时，可以解决线程安全问题。只需在run()方法前加上synshronized关键字即可。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>        </span><br><span class="line"><span class="number">3</span>     <span class="comment">// ....</span></span><br><span class="line"><span class="number">4</span>  </span><br><span class="line"><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>三.同步代码块</strong></p><p>正如上面所分析的那样，解决线程安全问题其实只需限制对共享资源访问的不确定性即可。使用同步方法时，使得整个方法体都成为了同步执行状态，会使得可能出现同步范围过大的情况，于是，针对需要同步的代码可以直接另一种同步方式——同步代码块来解决。</p><p>同步代码块的格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"><span class="number">2</span>             </span><br><span class="line"><span class="number">3</span>     <span class="comment">//...</span></span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>其中，obj为锁对象，因此，选择哪一个对象作为锁是至关重要的。一般情况下，都是选择此共享资源对象作为锁对象。</strong></p><p><strong>如上例中，最好选用account对象作为锁对象。（当然，选用this也是可以的，那是因为创建线程使用了runnable方式，如果是直接继承Thread方式创建的线程，使用this对象作为同步锁会其实没有起到任何作用，因为是不同的对象了。因此，选择同步锁时需要格外小心…）</strong></p><p><strong>四.Lock对象同步锁</strong></p><p>上面我们可以看出，正因为对同步锁对象的选择需要如此小心，有没有什么简单点的解决方案呢？以方便同步锁对象与共享资源解耦，同时又能很好的解决线程安全问题。</p><p>使用Lock对象同步锁可以方便的解决此问题，唯一需要注意的一点是Lock对象需要与资源对象同样具有一对一的关系。Lock对象同步锁一般格式为：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>   <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     <span class="comment">// 显示定义Lock同步锁对象，此对象与共享资源具有一对一关系</span></span><br><span class="line"> <span class="number">4</span>     <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"> <span class="number">5</span>     </span><br><span class="line"> <span class="number">6</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="number">7</span>         <span class="comment">// 加锁</span></span><br><span class="line"> <span class="number">8</span>         lock.lock();</span><br><span class="line"> <span class="number">9</span>         </span><br><span class="line"><span class="number">10</span>         <span class="comment">//...  需要进行线程安全同步的代码</span></span><br><span class="line"><span class="number">11</span>         </span><br><span class="line"><span class="number">12</span>         <span class="comment">// 释放Lock锁</span></span><br><span class="line"><span class="number">13</span>         lock.unlock();</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"><span class="number">15</span>     </span><br><span class="line"><span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure><p> <strong>五.wait()/notify()/notifyAll()线程通信</strong></p><p>在博文<a href="http://www.cnblogs.com/lwbqqyumidi/p/3693015.html" target="_blank" rel="noopener">《Java总结篇系列：java.lang.Object》</a>中有提及到这三个方法，虽然这三个方法主要都是用于多线程中，但实际上都是Object类中的本地方法。因此，理论上，任何Object对象都可以作为这三个方法的主调，在实际的多线程编程中，只有同步锁对象调这三个方法，才能完成对多线程间的线程通信。</p><p>wait()：导致当前线程等待并使其进入到等待阻塞状态。直到其他线程调用该同步锁对象的notify()或notifyAll()方法来唤醒此线程。</p><p>notify()：唤醒在此同步锁对象上等待的单个线程，如果有多个线程都在此同步锁对象上等待，则会任意选择其中某个线程进行唤醒操作，只有当前线程放弃对同步锁对象的锁定，才可能执行被唤醒的线程。</p><p>notifyAll()：唤醒在此同步锁对象上等待的所有线程，只有当前线程放弃对同步锁对象的锁定，才可能执行被唤醒的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> com.qqyumidi;</span><br><span class="line">  <span class="number">2</span> </span><br><span class="line">  <span class="number">3</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">  <span class="number">4</span> </span><br><span class="line">  <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="number">6</span>         Account account = <span class="keyword">new</span> Account(<span class="string">"123456"</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="number">7</span> </span><br><span class="line">  <span class="number">8</span>         Thread drawMoneyThread = <span class="keyword">new</span> DrawMoneyThread(<span class="string">"取钱线程"</span>, account, <span class="number">700</span>);</span><br><span class="line">  <span class="number">9</span>         Thread depositeMoneyThread = <span class="keyword">new</span> DepositeMoneyThread(<span class="string">"存钱线程"</span>, account, <span class="number">700</span>);</span><br><span class="line"> <span class="number">10</span> </span><br><span class="line"> <span class="number">11</span>         drawMoneyThread.start();</span><br><span class="line"> <span class="number">12</span>         depositeMoneyThread.start();</span><br><span class="line"> <span class="number">13</span>     &#125;</span><br><span class="line"> <span class="number">14</span> </span><br><span class="line"> <span class="number">15</span> &#125;</span><br><span class="line"> <span class="number">16</span> </span><br><span class="line"> <span class="number">17</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawMoneyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> <span class="number">18</span> </span><br><span class="line"> <span class="number">19</span>     <span class="keyword">private</span> Account account;</span><br><span class="line"> <span class="number">20</span>     <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line"> <span class="number">21</span> </span><br><span class="line"> <span class="number">22</span>     <span class="function"><span class="keyword">public</span> <span class="title">DrawMoneyThread</span><span class="params">(String threadName, Account account, <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line"> <span class="number">23</span>         <span class="keyword">super</span>(threadName);</span><br><span class="line"> <span class="number">24</span>         <span class="keyword">this</span>.account = account;</span><br><span class="line"> <span class="number">25</span>         <span class="keyword">this</span>.amount = amount;</span><br><span class="line"> <span class="number">26</span>     &#125;</span><br><span class="line"> <span class="number">27</span> </span><br><span class="line"> <span class="number">28</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">29</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">30</span>             account.draw(amount, i);</span><br><span class="line"> <span class="number">31</span>         &#125;</span><br><span class="line"> <span class="number">32</span>     &#125;</span><br><span class="line"> <span class="number">33</span> &#125;</span><br><span class="line"> <span class="number">34</span> </span><br><span class="line"> <span class="number">35</span> <span class="class"><span class="keyword">class</span> <span class="title">DepositeMoneyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"> <span class="number">36</span> </span><br><span class="line"> <span class="number">37</span>     <span class="keyword">private</span> Account account;</span><br><span class="line"> <span class="number">38</span>     <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line"> <span class="number">39</span> </span><br><span class="line"> <span class="number">40</span>     <span class="function"><span class="keyword">public</span> <span class="title">DepositeMoneyThread</span><span class="params">(String threadName, Account account, <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line"> <span class="number">41</span>         <span class="keyword">super</span>(threadName);</span><br><span class="line"> <span class="number">42</span>         <span class="keyword">this</span>.account = account;</span><br><span class="line"> <span class="number">43</span>         <span class="keyword">this</span>.amount = amount;</span><br><span class="line"> <span class="number">44</span>     &#125;</span><br><span class="line"> <span class="number">45</span> </span><br><span class="line"> <span class="number">46</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">47</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> <span class="number">48</span>             account.deposite(amount, i);</span><br><span class="line"> <span class="number">49</span>         &#125;</span><br><span class="line"> <span class="number">50</span>     &#125;</span><br><span class="line"> <span class="number">51</span> &#125;</span><br><span class="line"> <span class="number">52</span> </span><br><span class="line"> <span class="number">53</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"> <span class="number">54</span> </span><br><span class="line"> <span class="number">55</span>     <span class="keyword">private</span> String accountNo;</span><br><span class="line"> <span class="number">56</span>     <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"> <span class="number">57</span>     <span class="comment">// 标识账户中是否已有存款</span></span><br><span class="line"> <span class="number">58</span>     <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"> <span class="number">59</span> </span><br><span class="line"> <span class="number">60</span>     <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">61</span> </span><br><span class="line"> <span class="number">62</span>     &#125;</span><br><span class="line"> <span class="number">63</span> </span><br><span class="line"> <span class="number">64</span>     <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String accountNo, <span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line"> <span class="number">65</span>         <span class="keyword">this</span>.accountNo = accountNo;</span><br><span class="line"> <span class="number">66</span>         <span class="keyword">this</span>.balance = balance;</span><br><span class="line"> <span class="number">67</span>     &#125;</span><br><span class="line"> <span class="number">68</span> </span><br><span class="line"> <span class="number">69</span>     <span class="function"><span class="keyword">public</span> String <span class="title">getAccountNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">70</span>         <span class="keyword">return</span> accountNo;</span><br><span class="line"> <span class="number">71</span>     &#125;</span><br><span class="line"> <span class="number">72</span> </span><br><span class="line"> <span class="number">73</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountNo</span><span class="params">(String accountNo)</span> </span>&#123;</span><br><span class="line"> <span class="number">74</span>         <span class="keyword">this</span>.accountNo = accountNo;</span><br><span class="line"> <span class="number">75</span>     &#125;</span><br><span class="line"> <span class="number">76</span> </span><br><span class="line"> <span class="number">77</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">78</span>         <span class="keyword">return</span> balance;</span><br><span class="line"> <span class="number">79</span>     &#125;</span><br><span class="line"> <span class="number">80</span> </span><br><span class="line"> <span class="number">81</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBalance</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line"> <span class="number">82</span>         <span class="keyword">this</span>.balance = balance;</span><br><span class="line"> <span class="number">83</span>     &#125;</span><br><span class="line"> <span class="number">84</span> </span><br><span class="line"> <span class="number">85</span>     <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 86      * 存钱</span></span><br><span class="line"><span class="comment"> 87      * </span></span><br><span class="line"><span class="comment"> 88      * <span class="doctag">@param</span> depositeAmount</span></span><br><span class="line"><span class="comment"> 89      */</span></span><br><span class="line"> <span class="number">90</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deposite</span><span class="params">(<span class="keyword">double</span> depositeAmount, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"> <span class="number">91</span> </span><br><span class="line"> <span class="number">92</span>         <span class="keyword">if</span> (flag) &#123;</span><br><span class="line"> <span class="number">93</span>             <span class="comment">// 账户中已有人存钱进去，此时当前线程需要等待阻塞</span></span><br><span class="line"> <span class="number">94</span>             <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="number">95</span>                 System.out.println(Thread.currentThread().getName() + <span class="string">" 开始要执行wait操作"</span> + <span class="string">" -- i="</span> + i);</span><br><span class="line"> <span class="number">96</span>                 wait();</span><br><span class="line"> <span class="number">97</span>                 <span class="comment">// 1</span></span><br><span class="line"> <span class="number">98</span>                 System.out.println(Thread.currentThread().getName() + <span class="string">" 执行了wait操作"</span> + <span class="string">" -- i="</span> + i);</span><br><span class="line"> <span class="number">99</span>             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">100</span>                 e.printStackTrace();</span><br><span class="line"><span class="number">101</span>             &#125;</span><br><span class="line"><span class="number">102</span>         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">103</span>             <span class="comment">// 开始存钱</span></span><br><span class="line"><span class="number">104</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" 存款:"</span> + depositeAmount + <span class="string">" -- i="</span> + i);</span><br><span class="line"><span class="number">105</span>             setBalance(balance + depositeAmount);</span><br><span class="line"><span class="number">106</span>             flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="number">107</span> </span><br><span class="line"><span class="number">108</span>             <span class="comment">// 唤醒其他线程</span></span><br><span class="line"><span class="number">109</span>             notifyAll();</span><br><span class="line"><span class="number">110</span> </span><br><span class="line"><span class="number">111</span>             <span class="comment">// 2</span></span><br><span class="line"><span class="number">112</span>             <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">113</span>                 Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="number">114</span>             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">115</span>                 e.printStackTrace();</span><br><span class="line"><span class="number">116</span>             &#125;</span><br><span class="line"><span class="number">117</span>             System.out.println(Thread.currentThread().getName() + <span class="string">"-- 存钱 -- 执行完毕"</span> + <span class="string">" -- i="</span> + i);</span><br><span class="line"><span class="number">118</span>         &#125;</span><br><span class="line"><span class="number">119</span>     &#125;</span><br><span class="line"><span class="number">120</span> </span><br><span class="line"><span class="number">121</span>     <span class="comment">/**</span></span><br><span class="line"><span class="comment">122      * 取钱</span></span><br><span class="line"><span class="comment">123      * </span></span><br><span class="line"><span class="comment">124      * <span class="doctag">@param</span> drawAmount</span></span><br><span class="line"><span class="comment">125      */</span></span><br><span class="line"><span class="number">126</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">double</span> drawAmount, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="number">127</span>         <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line"><span class="number">128</span>             <span class="comment">// 账户中还没人存钱进去，此时当前线程需要等待阻塞</span></span><br><span class="line"><span class="number">129</span>             <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">130</span>                 System.out.println(Thread.currentThread().getName() + <span class="string">" 开始要执行wait操作"</span> + <span class="string">" 执行了wait操作"</span> + <span class="string">" -- i="</span> + i);</span><br><span class="line"><span class="number">131</span>                 wait();</span><br><span class="line"><span class="number">132</span>                 System.out.println(Thread.currentThread().getName() + <span class="string">" 执行了wait操作"</span> + <span class="string">" 执行了wait操作"</span> + <span class="string">" -- i="</span> + i);</span><br><span class="line"><span class="number">133</span>             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="number">134</span>                 e.printStackTrace();</span><br><span class="line"><span class="number">135</span>             &#125;</span><br><span class="line"><span class="number">136</span>         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">137</span>             <span class="comment">// 开始取钱</span></span><br><span class="line"><span class="number">138</span>             System.out.println(Thread.currentThread().getName() + <span class="string">" 取钱："</span> + drawAmount + <span class="string">" -- i="</span> + i);</span><br><span class="line"><span class="number">139</span>             setBalance(getBalance() - drawAmount);</span><br><span class="line"><span class="number">140</span> </span><br><span class="line"><span class="number">141</span>             flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="number">142</span> </span><br><span class="line"><span class="number">143</span>             <span class="comment">// 唤醒其他线程</span></span><br><span class="line"><span class="number">144</span>             notifyAll();</span><br><span class="line"><span class="number">145</span> </span><br><span class="line"><span class="number">146</span>             System.out.println(Thread.currentThread().getName() + <span class="string">"-- 取钱 -- 执行完毕"</span> + <span class="string">" -- i="</span> + i); <span class="comment">// 3</span></span><br><span class="line"><span class="number">147</span>         &#125;</span><br><span class="line"><span class="number">148</span>     &#125;</span><br><span class="line"><span class="number">149</span> </span><br><span class="line"><span class="number">150</span> &#125;</span><br></pre></td></tr></table></figure><p>上面的例子演示了wait()/notify()/notifyAll()的用法。部分输出结果为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> 取钱线程 开始要执行<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">0</span></span><br><span class="line"> <span class="number">2</span> 存钱线程 存款:<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">0</span></span><br><span class="line"> <span class="number">3</span> 存钱线程-- 存钱 -- 执行完毕 -- i=<span class="number">0</span></span><br><span class="line"> <span class="number">4</span> 存钱线程 开始要执行<span class="keyword">wait</span>操作 -- i=<span class="number">1</span></span><br><span class="line"> <span class="number">5</span> 取钱线程 执行了<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">0</span></span><br><span class="line"> <span class="number">6</span> 取钱线程 取钱：<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">1</span></span><br><span class="line"> <span class="number">7</span> 取钱线程-- 取钱 -- 执行完毕 -- i=<span class="number">1</span></span><br><span class="line"> <span class="number">8</span> 取钱线程 开始要执行<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">2</span></span><br><span class="line"> <span class="number">9</span> 存钱线程 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">1</span></span><br><span class="line"><span class="number">10</span> 存钱线程 存款:<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">2</span></span><br><span class="line"><span class="number">11</span> 存钱线程-- 存钱 -- 执行完毕 -- i=<span class="number">2</span></span><br><span class="line"><span class="number">12</span> 取钱线程 执行了<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">2</span></span><br><span class="line"><span class="number">13</span> 取钱线程 取钱：<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">3</span></span><br><span class="line"><span class="number">14</span> 取钱线程-- 取钱 -- 执行完毕 -- i=<span class="number">3</span></span><br><span class="line"><span class="number">15</span> 取钱线程 开始要执行<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">4</span></span><br><span class="line"><span class="number">16</span> 存钱线程 存款:<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">3</span></span><br><span class="line"><span class="number">17</span> 存钱线程-- 存钱 -- 执行完毕 -- i=<span class="number">3</span></span><br><span class="line"><span class="number">18</span> 存钱线程 开始要执行<span class="keyword">wait</span>操作 -- i=<span class="number">4</span></span><br><span class="line"><span class="number">19</span> 取钱线程 执行了<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">4</span></span><br><span class="line"><span class="number">20</span> 取钱线程 取钱：<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">5</span></span><br><span class="line"><span class="number">21</span> 取钱线程-- 取钱 -- 执行完毕 -- i=<span class="number">5</span></span><br><span class="line"><span class="number">22</span> 取钱线程 开始要执行<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">6</span></span><br><span class="line"><span class="number">23</span> 存钱线程 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">4</span></span><br><span class="line"><span class="number">24</span> 存钱线程 存款:<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">5</span></span><br><span class="line"><span class="number">25</span> 存钱线程-- 存钱 -- 执行完毕 -- i=<span class="number">5</span></span><br><span class="line"><span class="number">26</span> 存钱线程 开始要执行<span class="keyword">wait</span>操作 -- i=<span class="number">6</span></span><br><span class="line"><span class="number">27</span> 取钱线程 执行了<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">6</span></span><br><span class="line"><span class="number">28</span> 取钱线程 取钱：<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">7</span></span><br><span class="line"><span class="number">29</span> 取钱线程-- 取钱 -- 执行完毕 -- i=<span class="number">7</span></span><br><span class="line"><span class="number">30</span> 取钱线程 开始要执行<span class="keyword">wait</span>操作 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">8</span></span><br><span class="line"><span class="number">31</span> 存钱线程 执行了<span class="keyword">wait</span>操作 -- i=<span class="number">6</span></span><br><span class="line"><span class="number">32</span> 存钱线程 存款:<span class="number">700</span><span class="variable">.0</span> -- i=<span class="number">7</span></span><br></pre></td></tr></table></figure><p>由此，我们需要注意如下几点：</p><p>1.wait()方法执行后，当前线程立即进入到等待阻塞状态，其后面的代码不会执行；</p><p>2.notify()/notifyAll()方法执行后，将唤醒此同步锁对象上的（任意一个-notify()/所有-notifyAll()）线程对象，但是，此时还并没有释放同步锁对象，也就是说，如果notify()/notifyAll()后面还有代码，还会继续进行，知道当前线程执行完毕才会释放同步锁对象；</p><p>3.notify()/notifyAll()执行后，如果右面有sleep()方法，则会使当前线程进入到阻塞状态，但是同步对象锁没有释放，依然自己保留，那么一定时候后还是会继续执行此线程，接下来同2；</p><p>4.wait()/notify()/nitifyAll()完成线程间的通信或协作都是基于不同对象锁的，因此，如果是不同的同步对象锁将失去意义，同时，同步对象锁最好是与共享资源对象保持一一对应关系；</p><p>5.当wait线程唤醒后并执行时，是接着上次执行到的wait()方法代码后面继续往下执行的。</p><p>当然，上面的例子相对来说比较简单，只是为了简单示例wait()/notify()/noitifyAll()方法的用法，但其本质上说，已经是一个简单的生产者-消费者模式了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lwbqqyumidi/p/3804883.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Java总结篇系列：Java多线程（一）&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://Conanisbest.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java高级特性——反射</title>
    <link href="https://conanisbest.github.io/2020/07/02/first/"/>
    <id>https://conanisbest.github.io/2020/07/02/first/</id>
    <published>2020-07-02T06:34:39.000Z</published>
    <updated>2020-07-03T08:10:30.216Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java高级特性——反射</strong></p><p><a href="https://www.jianshu.com/u/2d3edce151d3" target="_blank" rel="noopener">peter_RD_nj</a></p><p>122018.08.27 16:40:42字数 1,009阅读 151,828</p><p>概述</p><p>定义</p><p><a href="https://baike.baidu.com/item/JAVA反射机制/6015990" target="_blank" rel="noopener">JAVA反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><p>用途</p><p>在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。当然，也不是所有的都适合反射，之前就遇到一个案例，通过反射得到的结果与预期不符。阅读源码发现，经过层层调用后在最终返回结果的地方对应用的权限进行了校验，对于没有权限的应用返回值是没有意义的缺省值，否则返回实际值起到保护用户的隐私目的。</p><p>反射机制的相关类</p><p>与Java反射相关的类如下：</p><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表类的成员变量（成员变量也称为类的属性）</td></tr><tr><td>Method类</td><td>代表类的方法</td></tr><tr><td>Constructor类</td><td>代表类的构造方法</td></tr></tbody></table><p>Class类</p><p><a href="https://developer.android.google.cn/reference/java/lang/Class" target="_blank" rel="noopener">Class</a>代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p><ul><li>获得类相关的方法</li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>asSubclass(Class<U> clazz)</U></td><td>把传递的类的对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或是接口的对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，数组中包含该类中所有公共类和接口类的对象</td></tr><tr><td>getDeclaredClasses()</td><td>返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td>forName(String className)</td><td>根据类名返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage()</td><td>获得类的包</td></tr><tr><td>getSimpleName()</td><td>获得类的名字</td></tr><tr><td>getSuperclass()</td><td>获得当前类继承的父类的名字</td></tr><tr><td>getInterfaces()</td><td>获得当前类实现的类或是接口</td></tr></tbody></table><ul><li>获得类中属性相关的方法</li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getField(String name)</td><td>获得某个公有的属性对象</td></tr><tr><td>getFields()</td><td>获得所有公有的属性对象</td></tr><tr><td>getDeclaredField(String name)</td><td>获得某个属性对象</td></tr><tr><td>getDeclaredFields()</td><td>获得所有属性对象</td></tr></tbody></table><ul><li>获得类中注解相关的方法</li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getAnnotation(Class<A> annotationClass)</A></td><td>返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td>getAnnotations()</td><td>返回该类所有的公有注解对象</td></tr><tr><td>getDeclaredAnnotation(Class<A> annotationClass)</A></td><td>返回该类中与参数类型匹配的所有注解对象</td></tr><tr><td>getDeclaredAnnotations()</td><td>返回该类所有的注解对象</td></tr></tbody></table><ul><li>获得类中构造器相关的方法</li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td>getConstructors()</td><td>获得该类的所有公有构造方法</td></tr><tr><td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td><td>获得该类中与参数类型匹配的构造方法</td></tr><tr><td>getDeclaredConstructors()</td><td>获得该类所有构造方法</td></tr></tbody></table><ul><li>获得类中方法相关的方法</li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个公有的方法</td></tr><tr><td>getMethods()</td><td>获得该类所有公有的方法</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获得该类所有方法</td></tr></tbody></table><ul><li>类中其他重要的方法</li></ul><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>isAnnotation()</td><td>如果是注解类型则返回true</td></tr><tr><td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td><td>如果是指定类型注解类型则返回true</td></tr><tr><td>isAnonymousClass()</td><td>如果是匿名类则返回true</td></tr><tr><td>isArray()</td><td>如果是一个数组类则返回true</td></tr><tr><td>isEnum()</td><td>如果是枚举类则返回true</td></tr><tr><td>isInstance(Object obj)</td><td>如果obj是该类的实例则返回true</td></tr><tr><td>isInterface()</td><td>如果是接口类则返回true</td></tr><tr><td>isLocalClass()</td><td>如果是局部类则返回true</td></tr><tr><td>isMemberClass()</td><td>如果是内部类则返回true</td></tr></tbody></table><p>Field类</p><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Field" target="_blank" rel="noopener">Field</a>代表类的成员变量（成员变量也称为类的属性）。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>equals(Object obj)</td><td>属性与obj相等则返回true</td></tr><tr><td>get(Object obj)</td><td>获得obj中对应的属性值</td></tr><tr><td>set(Object obj, Object value)</td><td>设置obj中对应属性值</td></tr></tbody></table><p>Method类</p><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method" target="_blank" rel="noopener">Method</a>代表类的方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>invoke(Object obj, Object… args)</td><td>传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><p>Constructor类</p><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Constructor" target="_blank" rel="noopener">Constructor</a>代表类的构造方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>newInstance(Object… initargs)</td><td>根据传递的参数创建类的对象</td></tr></tbody></table><p>示例</p><p>为了演示反射的使用，首先构造一个与书籍相关的model——Book.java，然后通过反射方法示例创建对象、反射私有构造方法、反射私有属性、反射私有方法，最后给出两个比较复杂的反射示例——获得当前ZenMode和关机Shutdown。</p><ul><li>被反射类Book.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"BookTag"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(String name, String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">declaredMethod</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        String string = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                string = <span class="string">"I am declaredMethod 1 !"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                string = <span class="string">"I am declaredMethod 2 !"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                string = <span class="string">"I am declaredMethod 1 !"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>反射逻辑封装在ReflectClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"peter.log.ReflectClass"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectNewInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            Book book = (Book) objectBook;</span><br><span class="line">            book.setName(<span class="string">"Android进阶之光"</span>);</span><br><span class="line">            book.setAuthor(<span class="string">"刘望舒"</span>);</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectNewInstance book = "</span> + book.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectPrivateConstructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Constructor&lt;?&gt; declaredConstructorBook = classBook.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            declaredConstructorBook.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object objectBook = declaredConstructorBook.newInstance(<span class="string">"Android开发艺术探索"</span>,<span class="string">"任玉刚"</span>);</span><br><span class="line">            Book book = (Book) objectBook;</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateConstructor book = "</span> + book.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectPrivateField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            Field fieldTag = classBook.getDeclaredField(<span class="string">"TAG"</span>);</span><br><span class="line">            fieldTag.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String tag = (String) fieldTag.get(objectBook);</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateField tag = "</span> + tag);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectPrivateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; classBook = Class.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Method methodBook = classBook.getDeclaredMethod(<span class="string">"declaredMethod"</span>,<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            methodBook.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            String string = (String) methodBook.invoke(objectBook,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateMethod string = "</span> + string);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得系统Zenmode值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getZenMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> zenMode = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; cServiceManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            Method mGetService = cServiceManager.getMethod(<span class="string">"getService"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oNotificationManagerService = mGetService.invoke(<span class="keyword">null</span>, Context.NOTIFICATION_SERVICE);</span><br><span class="line">            Class&lt;?&gt; cINotificationManagerStub = Class.forName(<span class="string">"android.app.INotificationManager$Stub"</span>);</span><br><span class="line">            Method mAsInterface = cINotificationManagerStub.getMethod(<span class="string">"asInterface"</span>,IBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oINotificationManager = mAsInterface.invoke(<span class="keyword">null</span>,oNotificationManagerService);</span><br><span class="line">            Method mGetZenMode = cINotificationManagerStub.getMethod(<span class="string">"getZenMode"</span>);</span><br><span class="line">            zenMode = (<span class="keyword">int</span>) mGetZenMode.invoke(oINotificationManager);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> zenMode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭手机</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; cServiceManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            Method mGetService = cServiceManager.getMethod(<span class="string">"getService"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oPowerManagerService = mGetService.invoke(<span class="keyword">null</span>,Context.POWER_SERVICE);</span><br><span class="line">            Class&lt;?&gt; cIPowerManagerStub = Class.forName(<span class="string">"android.os.IPowerManager$Stub"</span>);</span><br><span class="line">            Method mShutdown = cIPowerManagerStub.getMethod(<span class="string">"shutdown"</span>,<span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>,<span class="title">boolean</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            Method mAsInterface = cIPowerManagerStub.getMethod(<span class="string">"asInterface"</span>,IBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object oIPowerManager = mAsInterface.invoke(<span class="keyword">null</span>,oPowerManagerService);</span><br><span class="line">            mShutdown.invoke(oIPowerManager,<span class="keyword">true</span>,<span class="keyword">null</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownOrReboot</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> shutdown, <span class="keyword">final</span> <span class="keyword">boolean</span> confirm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; ServiceManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            <span class="comment">// 获得ServiceManager的getService方法</span></span><br><span class="line">            Method getService = ServiceManager.getMethod(<span class="string">"getService"</span>, java.lang.String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 调用getService获取RemoteService</span></span><br><span class="line">            Object oRemoteService = getService.invoke(<span class="keyword">null</span>, Context.POWER_SERVICE);</span><br><span class="line">            <span class="comment">// 获得IPowerManager.Stub类</span></span><br><span class="line">            Class&lt;?&gt; cStub = Class.forName(<span class="string">"android.os.IPowerManager$Stub"</span>);</span><br><span class="line">            <span class="comment">// 获得asInterface方法</span></span><br><span class="line">            Method asInterface = cStub.getMethod(<span class="string">"asInterface"</span>, android.os.IBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 调用asInterface方法获取IPowerManager对象</span></span><br><span class="line">            Object oIPowerManager = asInterface.invoke(<span class="keyword">null</span>, oRemoteService);</span><br><span class="line">            <span class="keyword">if</span> (shutdown) &#123;</span><br><span class="line">                <span class="comment">// 获得shutdown()方法</span></span><br><span class="line">                Method shutdownMethod = oIPowerManager.getClass().getMethod(</span><br><span class="line">                        <span class="string">"shutdown"</span>, <span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, <span class="title">boolean</span>.<span class="title">class</span>)</span>;</span><br><span class="line">                <span class="comment">// 调用shutdown()方法</span></span><br><span class="line">                shutdownMethod.invoke(oIPowerManager, confirm, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获得reboot()方法</span></span><br><span class="line">                Method rebootMethod = oIPowerManager.getClass().getMethod(<span class="string">"reboot"</span>,</span><br><span class="line">                        <span class="keyword">boolean</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, <span class="title">boolean</span>.<span class="title">class</span>)</span>;</span><br><span class="line">                <span class="comment">// 调用reboot()方法</span></span><br><span class="line">                rebootMethod.invoke(oIPowerManager, confirm, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>调用相应反射逻辑方法</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 创建对象</span></span><br><span class="line">          ReflectClass.reflectNewInstance();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 反射私有的构造方法</span></span><br><span class="line">          ReflectClass.reflectPrivateConstructor();</span><br><span class="line">      </span><br><span class="line">          <span class="comment">// 反射私有属性</span></span><br><span class="line">          ReflectClass.reflectPrivateField();</span><br><span class="line">      </span><br><span class="line">          <span class="comment">// 反射私有方法</span></span><br><span class="line">          ReflectClass.reflectPrivateMethod();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">          ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      Log.d(TAG,<span class="string">" zenmode = "</span> + ReflectClass.getZenMode());</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>Log输出结果如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>-<span class="number">27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">37</span><span class="variable">.999</span> <span class="number">11987</span>-<span class="number">11987</span>/com<span class="variable">.android</span><span class="variable">.peter</span><span class="variable">.reflectdemo</span> D/peter<span class="variable">.log</span><span class="variable">.ReflectClass</span>: reflectNewInstance book = Book&#123;name='Android进阶之光', author='刘望舒'&#125;</span><br><span class="line"><span class="number">08</span>-<span class="number">27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38</span><span class="variable">.000</span> <span class="number">11987</span>-<span class="number">11987</span>/com<span class="variable">.android</span><span class="variable">.peter</span><span class="variable">.reflectdemo</span> D/peter<span class="variable">.log</span><span class="variable">.ReflectClass</span>: reflectPrivateConstructor book = Book&#123;name='Android开发艺术探索', author='任玉刚'&#125;</span><br><span class="line"><span class="number">08</span>-<span class="number">27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38</span><span class="variable">.000</span> <span class="number">11987</span>-<span class="number">11987</span>/com<span class="variable">.android</span><span class="variable">.peter</span><span class="variable">.reflectdemo</span> D/peter<span class="variable">.log</span><span class="variable">.ReflectClass</span>: reflectPrivateField tag = BookTag</span><br><span class="line"><span class="number">08</span>-<span class="number">27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38</span><span class="variable">.000</span> <span class="number">11987</span>-<span class="number">11987</span>/com<span class="variable">.android</span><span class="variable">.peter</span><span class="variable">.reflectdemo</span> D/peter<span class="variable">.log</span><span class="variable">.ReflectClass</span>: reflectPrivateMethod <span class="keyword">string</span> = I am declaredMethod <span class="number">1</span> !</span><br><span class="line"><span class="number">08</span>-<span class="number">27</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38</span><span class="variable">.004</span> <span class="number">11987</span>-<span class="number">11987</span>/com<span class="variable">.android</span><span class="variable">.peter</span><span class="variable">.reflectdemo</span> D/peter<span class="variable">.log</span><span class="variable">.ReflectDemo</span>:  zenmode = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>总结</p><p>本文列举了反射机制使用过程中常用的、重要的一些类及其方法，更多信息和用法需要近一步的阅读Google提供的相关文档和示例。</p><p>在阅读Class类文档时发现一个特点，以通过反射获得Method对象为例，一般会提供四种方法，getMethod(parameterTypes)、getMethods()、getDeclaredMethod(parameterTypes)和getDeclaredMethods()。getMethod(parameterTypes)用来获取某个公有的方法的对象，getMethods()获得该类所有公有的方法，getDeclaredMethod(parameterTypes)获得该类某个方法，getDeclaredMethods()获得该类所有方法。带有Declared修饰的方法可以反射到私有的方法，没有Declared修饰的只能用来反射公有的方法。其他的Annotation、Field、Constructor也是如此。</p><p>在ReflectClass类中还提供了两种反射PowerManager.shutdown()的方法，在调用的时候会输出如下log，提示没有相关权限。之前在项目中尝试反射其他方法的时候还遇到过有权限和没权限返回的值不一样的情况。如果源码中明确进行了权限验证，而你的应用又无法获得这个权限的话，建议就不要浪费时间反射了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">W&#x2F;System.err: java.lang.reflect.InvocationTargetException</span><br><span class="line">W&#x2F;System.err:     at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">W&#x2F;System.err:     at .ReflectClass.shutDown(ReflectClass.java:104)</span><br><span class="line">W&#x2F;System.err:     at .MainActivity$1.onClick(MainActivity.java:25)</span><br><span class="line">W&#x2F;System.err:     at android.view.View.performClick(View.java:6259)</span><br><span class="line">W&#x2F;System.err:     at android.view.View$PerformClick.run(View.java:24732)</span><br><span class="line">W&#x2F;System.err:     at android.os.Handler.handleCallback(Handler.java:789)</span><br><span class="line">W&#x2F;System.err:     at android.os.Handler.dispatchMessage(Handler.java:98)</span><br><span class="line">W&#x2F;System.err:     at android.os.Looper.loop(Looper.java:164)</span><br><span class="line">W&#x2F;System.err:     at android.app.ActivityThread.main(ActivityThread.java:6592)</span><br><span class="line">W&#x2F;System.err:     at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">W&#x2F;System.err:     at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:240)</span><br><span class="line">W&#x2F;System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:769)</span><br><span class="line">W&#x2F;System.err: Caused by: java.lang.SecurityException: Neither user 10224 nor current process has android.permission.REBOOT.</span><br><span class="line">W&#x2F;System.err:     at android.os.Parcel.readException(Parcel.java:1942)</span><br><span class="line">W&#x2F;System.err:     at android.os.Parcel.readException(Parcel.java:1888)</span><br><span class="line">W&#x2F;System.err:     at android.os.IPowerManager$Stub$Proxy.shutdown(IPowerManager.java:787)</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/peter_RD_nj/DemoAllInOne/tree/master/ReflectDemo" target="_blank" rel="noopener">ReflectDemo</a></p><p>参考文献</p><p><a href="https://link.jianshu.com/?t=http://blog.qiji.tech/archives/4374" target="_blank" rel="noopener">认识反射机制（Reflection）</a></p><p><a href="http://www.cnblogs.com/mengdd/archive/2013/01/26/2877972.html" target="_blank" rel="noopener">Java 反射机制</a></p><p><a href="http://blog.csdn.net/ljphhj/article/details/12858767" target="_blank" rel="noopener">一个例子让你了解Java反射机制</a></p><p><a href="https://link.jianshu.com/?t=http://www.cnblogs.com/crazypebble/archive/2011/04/13/2014582.html" target="_blank" rel="noopener">Java反射机制的原理及在Android下的简单应用</a></p><p><a href="https://link.jianshu.com/?t=http://zlb1986.iteye.com/blog/937781" target="_blank" rel="noopener">java中的反射机制</a></p><p><a href="https://link.jianshu.com/?t=http://efany.github.io/2016/04/02/Android注解与反射机制/" target="_blank" rel="noopener">Android注解与反射机制</a></p><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method?hl=zh-cn" target="_blank" rel="noopener">java.lang.reflect.Method</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Java高级特性——反射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/u/2d3edce151d3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;peter_RD_nj&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="java" scheme="https://Conanisbest.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="https://conanisbest.github.io/2019/10/21/demo/"/>
    <id>https://conanisbest.github.io/2019/10/21/demo/</id>
    <published>2019-10-21T02:34:12.000Z</published>
    <updated>2020-07-03T08:18:39.850Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note">    <h5>测试标题</h5>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (</span><br><span class="line">    small: (</span><br><span class="line">        min-width: null,</span><br><span class="line">        max-width: 479px,</span><br><span class="line">        base-font: 16px,</span><br><span class="line">        vertical-rhythm: 1.3</span><br><span class="line">    ),</span><br><span class="line">    medium: (</span><br><span class="line">        min-width: 480px,</span><br><span class="line">        max-width: 959px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.414</span><br><span class="line">    ),</span><br><span class="line">    large: (</span><br><span class="line">        min-width: 960px,</span><br><span class="line">        max-width: 1099px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.5</span><br><span class="line">    ),</span><br><span class="line">    xlarge: (</span><br><span class="line">        min-width: 1100px,</span><br><span class="line">        max-width: null,</span><br><span class="line">        base-font: 21px,</span><br><span class="line">        vertical-rhythm: 1.618</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info">    <h5>测试标题</h5>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;</span><br><span class="line">    $min-width: map-get($map, min-width);</span><br><span class="line">    $max-width: map-get($map, max-width);</span><br><span class="line">    $base-font: map-get($map, base-font);</span><br><span class="line">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning">    <h5>测试标题</h5>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, 21px, 1.618)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">        @if $min-width &#123;</span><br><span class="line">            @include breakpoint( $min-width ) &#123;</span><br><span class="line">                font-size: $base-font;</span><br><span class="line">                line-height: $vertical-rhythm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; @else &#123;</span><br><span class="line">            font-size: $base-font;</span><br><span class="line">            line-height: $vertical-rhythm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;</span><br><span class="line">    @each $list in $breakpoint-list &#123;</span><br><span class="line">        @if nth($list, 1) &#x3D;&#x3D; $label &#123;</span><br><span class="line">            @return $list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @return null;</span><br><span class="line">&#125;</span><br><span class="line">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased">    <h5>Test Title</h5>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="https://Conanisbest.github.io/tags/css/"/>
    
  </entry>
  
</feed>
